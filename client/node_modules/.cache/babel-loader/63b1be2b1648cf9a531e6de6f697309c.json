{"ast":null,"code":"import contains from 'dom-helpers/contains';\nimport listen from 'dom-helpers/listen';\nimport ownerDocument from 'dom-helpers/ownerDocument';\nimport { useCallback, useEffect, useRef } from 'react';\nimport useEventCallback from '@restart/hooks/useEventCallback';\nimport warning from 'warning';\nconst escapeKeyCode = 27;\nconst noop = () => {};\nfunction isLeftClickEvent(event) {\n  return event.button === 0;\n}\nfunction isModifiedEvent(event) {\n  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);\n}\nconst getRefTarget = ref => ref && ('current' in ref ? ref.current : ref);\n\n/**\r\n * The `useRootClose` hook registers your callback on the document\r\n * when rendered. Powers the `<Overlay/>` component. This is used achieve modal\r\n * style behavior where your callback is triggered when the user tries to\r\n * interact with the rest of the document or hits the `esc` key.\r\n *\r\n * @param {Ref<HTMLElement>| HTMLElement} ref  The element boundary\r\n * @param {function} onRootClose\r\n * @param {object=}  options\r\n * @param {boolean=} options.disabled\r\n * @param {string=}  options.clickTrigger The DOM event name (click, mousedown, etc) to attach listeners on\r\n */\nfunction useRootClose(ref, onRootClose, {\n  disabled,\n  clickTrigger = 'click'\n} = {}) {\n  const preventMouseRootCloseRef = useRef(false);\n  const onClose = onRootClose || noop;\n  const handleMouseCapture = useCallback(e => {\n    const currentTarget = getRefTarget(ref);\n    warning(!!currentTarget, 'RootClose captured a close event but does not have a ref to compare it to. ' + 'useRootClose(), should be passed a ref that resolves to a DOM node');\n    preventMouseRootCloseRef.current = !currentTarget || isModifiedEvent(e) || !isLeftClickEvent(e) || !!contains(currentTarget, e.target);\n  }, [ref]);\n  const handleMouse = useEventCallback(e => {\n    if (!preventMouseRootCloseRef.current) {\n      onClose(e);\n    }\n  });\n  const handleKeyUp = useEventCallback(e => {\n    if (e.keyCode === escapeKeyCode) {\n      onClose(e);\n    }\n  });\n  useEffect(() => {\n    if (disabled || ref == null) return undefined; // Store the current event to avoid triggering handlers immediately\n    // https://github.com/facebook/react/issues/20074\n\n    let currentEvent = window.event;\n    const doc = ownerDocument(getRefTarget(ref)); // Use capture for this listener so it fires before React's listener, to\n    // avoid false positives in the contains() check below if the target DOM\n    // element is removed in the React mouse callback.\n\n    const removeMouseCaptureListener = listen(doc, clickTrigger, handleMouseCapture, true);\n    const removeMouseListener = listen(doc, clickTrigger, e => {\n      // skip if this event is the same as the one running when we added the handlers\n      if (e === currentEvent) {\n        currentEvent = undefined;\n        return;\n      }\n      handleMouse(e);\n    });\n    const removeKeyupListener = listen(doc, 'keyup', e => {\n      // skip if this event is the same as the one running when we added the handlers\n      if (e === currentEvent) {\n        currentEvent = undefined;\n        return;\n      }\n      handleKeyUp(e);\n    });\n    let mobileSafariHackListeners = [];\n    if ('ontouchstart' in doc.documentElement) {\n      mobileSafariHackListeners = [].slice.call(doc.body.children).map(el => listen(el, 'mousemove', noop));\n    }\n    return () => {\n      removeMouseCaptureListener();\n      removeMouseListener();\n      removeKeyupListener();\n      mobileSafariHackListeners.forEach(remove => remove());\n    };\n  }, [ref, disabled, clickTrigger, handleMouseCapture, handleMouse, handleKeyUp]);\n}\nexport default useRootClose;","map":{"version":3,"names":["contains","listen","ownerDocument","useCallback","useEffect","useRef","useEventCallback","warning","escapeKeyCode","noop","isLeftClickEvent","event","button","isModifiedEvent","metaKey","altKey","ctrlKey","shiftKey","getRefTarget","ref","current","useRootClose","onRootClose","disabled","clickTrigger","preventMouseRootCloseRef","onClose","handleMouseCapture","e","currentTarget","target","handleMouse","handleKeyUp","keyCode","undefined","currentEvent","window","doc","removeMouseCaptureListener","removeMouseListener","removeKeyupListener","mobileSafariHackListeners","documentElement","slice","call","body","children","map","el","forEach","remove"],"sources":["C:/Users/ozguc/react-workspace/mernStack/mernStackHistoryAgenda/client/node_modules/@restart/ui/esm/useRootClose.js"],"sourcesContent":["import contains from 'dom-helpers/contains';\r\nimport listen from 'dom-helpers/listen';\r\nimport ownerDocument from 'dom-helpers/ownerDocument';\r\nimport { useCallback, useEffect, useRef } from 'react';\r\nimport useEventCallback from '@restart/hooks/useEventCallback';\r\nimport warning from 'warning';\r\nconst escapeKeyCode = 27;\r\n\r\nconst noop = () => {};\r\n\r\nfunction isLeftClickEvent(event) {\r\n  return event.button === 0;\r\n}\r\n\r\nfunction isModifiedEvent(event) {\r\n  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);\r\n}\r\n\r\nconst getRefTarget = ref => ref && ('current' in ref ? ref.current : ref);\r\n\r\n/**\r\n * The `useRootClose` hook registers your callback on the document\r\n * when rendered. Powers the `<Overlay/>` component. This is used achieve modal\r\n * style behavior where your callback is triggered when the user tries to\r\n * interact with the rest of the document or hits the `esc` key.\r\n *\r\n * @param {Ref<HTMLElement>| HTMLElement} ref  The element boundary\r\n * @param {function} onRootClose\r\n * @param {object=}  options\r\n * @param {boolean=} options.disabled\r\n * @param {string=}  options.clickTrigger The DOM event name (click, mousedown, etc) to attach listeners on\r\n */\r\nfunction useRootClose(ref, onRootClose, {\r\n  disabled,\r\n  clickTrigger = 'click'\r\n} = {}) {\r\n  const preventMouseRootCloseRef = useRef(false);\r\n  const onClose = onRootClose || noop;\r\n  const handleMouseCapture = useCallback(e => {\r\n    const currentTarget = getRefTarget(ref);\r\n    warning(!!currentTarget, 'RootClose captured a close event but does not have a ref to compare it to. ' + 'useRootClose(), should be passed a ref that resolves to a DOM node');\r\n    preventMouseRootCloseRef.current = !currentTarget || isModifiedEvent(e) || !isLeftClickEvent(e) || !!contains(currentTarget, e.target);\r\n  }, [ref]);\r\n  const handleMouse = useEventCallback(e => {\r\n    if (!preventMouseRootCloseRef.current) {\r\n      onClose(e);\r\n    }\r\n  });\r\n  const handleKeyUp = useEventCallback(e => {\r\n    if (e.keyCode === escapeKeyCode) {\r\n      onClose(e);\r\n    }\r\n  });\r\n  useEffect(() => {\r\n    if (disabled || ref == null) return undefined; // Store the current event to avoid triggering handlers immediately\r\n    // https://github.com/facebook/react/issues/20074\r\n\r\n    let currentEvent = window.event;\r\n    const doc = ownerDocument(getRefTarget(ref)); // Use capture for this listener so it fires before React's listener, to\r\n    // avoid false positives in the contains() check below if the target DOM\r\n    // element is removed in the React mouse callback.\r\n\r\n    const removeMouseCaptureListener = listen(doc, clickTrigger, handleMouseCapture, true);\r\n    const removeMouseListener = listen(doc, clickTrigger, e => {\r\n      // skip if this event is the same as the one running when we added the handlers\r\n      if (e === currentEvent) {\r\n        currentEvent = undefined;\r\n        return;\r\n      }\r\n\r\n      handleMouse(e);\r\n    });\r\n    const removeKeyupListener = listen(doc, 'keyup', e => {\r\n      // skip if this event is the same as the one running when we added the handlers\r\n      if (e === currentEvent) {\r\n        currentEvent = undefined;\r\n        return;\r\n      }\r\n\r\n      handleKeyUp(e);\r\n    });\r\n    let mobileSafariHackListeners = [];\r\n\r\n    if ('ontouchstart' in doc.documentElement) {\r\n      mobileSafariHackListeners = [].slice.call(doc.body.children).map(el => listen(el, 'mousemove', noop));\r\n    }\r\n\r\n    return () => {\r\n      removeMouseCaptureListener();\r\n      removeMouseListener();\r\n      removeKeyupListener();\r\n      mobileSafariHackListeners.forEach(remove => remove());\r\n    };\r\n  }, [ref, disabled, clickTrigger, handleMouseCapture, handleMouse, handleKeyUp]);\r\n}\r\n\r\nexport default useRootClose;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}