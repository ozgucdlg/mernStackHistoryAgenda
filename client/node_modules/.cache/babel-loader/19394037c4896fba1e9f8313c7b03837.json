{"ast":null,"code":"import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from './Button';\nimport ButtonGroup from './ButtonGroup';\nimport Dropdown from './Dropdown';\nimport { alignPropType } from './types';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst propTypes = {\n  /**\r\n   * An html id attribute for the Toggle button, necessary for assistive technologies, such as screen readers.\r\n   * @type {string}\r\n   * @required\r\n   */\n  id: PropTypes.string,\n  /**\r\n   * Accessible label for the toggle; the value of `title` if not specified.\r\n   */\n  toggleLabel: PropTypes.string,\n  /** An `href` passed to the non-toggle Button */\n  href: PropTypes.string,\n  /** An anchor `target` passed to the non-toggle Button */\n  target: PropTypes.string,\n  /** An `onClick` handler passed to the non-toggle Button */\n  onClick: PropTypes.func,\n  /** The content of the non-toggle Button.  */\n  title: PropTypes.node.isRequired,\n  /** A `type` passed to the non-toggle Button */\n  type: PropTypes.string,\n  /** Disables both Buttons  */\n  disabled: PropTypes.bool,\n  /**\r\n   * Aligns the dropdown menu.\r\n   *\r\n   * _see [DropdownMenu](#dropdown-menu-props) for more details_\r\n   *\r\n   * @type {\"start\"|\"end\"|{ sm: \"start\"|\"end\" }|{ md: \"start\"|\"end\" }|{ lg: \"start\"|\"end\" }|{ xl: \"start\"|\"end\"}|{ xxl: \"start\"|\"end\"} }\r\n   */\n  align: alignPropType,\n  /** An ARIA accessible role applied to the Menu component. When set to 'menu', The dropdown */\n  menuRole: PropTypes.string,\n  /** Whether to render the dropdown menu in the DOM before the first time it is shown */\n  renderMenuOnMount: PropTypes.bool,\n  /**\r\n   *  Which event when fired outside the component will cause it to be closed.\r\n   *\r\n   * _see [DropdownMenu](#dropdown-menu-props) for more details_\r\n   */\n  rootCloseEvent: PropTypes.string,\n  /** @ignore */\n  bsPrefix: PropTypes.string,\n  /** @ignore */\n  variant: PropTypes.string,\n  /** @ignore */\n  size: PropTypes.string\n};\nconst defaultProps = {\n  toggleLabel: 'Toggle dropdown',\n  type: 'button'\n};\n/**\r\n * A convenience component for simple or general use split button dropdowns. Renders a\r\n * `ButtonGroup` containing a `Button` and a `Button` toggle for the `Dropdown`. All `children`\r\n * are passed directly to the default `Dropdown.Menu`. This component accepts all of [`Dropdown`'s\r\n * props](#dropdown-props).\r\n *\r\n * _All unknown props are passed through to the `Dropdown` component._\r\n * The Button `variant`, `size` and `bsPrefix` props are passed to the button and toggle,\r\n * and menu-related props are passed to the `Dropdown.Menu`\r\n */\n\nconst SplitButton = /*#__PURE__*/React.forwardRef(({\n  id,\n  bsPrefix,\n  size,\n  variant,\n  title,\n  type,\n  toggleLabel,\n  children,\n  onClick,\n  href,\n  target,\n  menuRole,\n  renderMenuOnMount,\n  rootCloseEvent,\n  ...props\n}, ref) => /*#__PURE__*/_jsxs(Dropdown, {\n  ref: ref,\n  ...props,\n  as: ButtonGroup,\n  children: [/*#__PURE__*/_jsx(Button, {\n    size: size,\n    variant: variant,\n    disabled: props.disabled,\n    bsPrefix: bsPrefix,\n    href: href,\n    target: target,\n    onClick: onClick,\n    type: type,\n    children: title\n  }), /*#__PURE__*/_jsx(Dropdown.Toggle, {\n    split: true,\n    id: id,\n    size: size,\n    variant: variant,\n    disabled: props.disabled,\n    childBsPrefix: bsPrefix,\n    children: /*#__PURE__*/_jsx(\"span\", {\n      className: \"visually-hidden\",\n      children: toggleLabel\n    })\n  }), /*#__PURE__*/_jsx(Dropdown.Menu, {\n    role: menuRole,\n    renderOnMount: renderMenuOnMount,\n    rootCloseEvent: rootCloseEvent,\n    children: children\n  })]\n}));\nSplitButton.propTypes = propTypes;\nSplitButton.defaultProps = defaultProps;\nSplitButton.displayName = 'SplitButton';\nexport default SplitButton;","map":{"version":3,"names":["React","PropTypes","Button","ButtonGroup","Dropdown","alignPropType","jsx","_jsx","jsxs","_jsxs","propTypes","id","string","toggleLabel","href","target","onClick","func","title","node","isRequired","type","disabled","bool","align","menuRole","renderMenuOnMount","rootCloseEvent","bsPrefix","variant","size","defaultProps","SplitButton","forwardRef","children","props","ref","as","Toggle","split","childBsPrefix","className","Menu","role","renderOnMount","displayName"],"sources":["C:/Users/ozguc/react-workspace/mernStack/mernStackHistoryAgenda/client/node_modules/react-bootstrap/esm/SplitButton.js"],"sourcesContent":["import * as React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Button from './Button';\r\nimport ButtonGroup from './ButtonGroup';\r\nimport Dropdown from './Dropdown';\r\nimport { alignPropType } from './types';\r\nimport { jsx as _jsx } from \"react/jsx-runtime\";\r\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\r\nconst propTypes = {\r\n  /**\r\n   * An html id attribute for the Toggle button, necessary for assistive technologies, such as screen readers.\r\n   * @type {string}\r\n   * @required\r\n   */\r\n  id: PropTypes.string,\r\n\r\n  /**\r\n   * Accessible label for the toggle; the value of `title` if not specified.\r\n   */\r\n  toggleLabel: PropTypes.string,\r\n\r\n  /** An `href` passed to the non-toggle Button */\r\n  href: PropTypes.string,\r\n\r\n  /** An anchor `target` passed to the non-toggle Button */\r\n  target: PropTypes.string,\r\n\r\n  /** An `onClick` handler passed to the non-toggle Button */\r\n  onClick: PropTypes.func,\r\n\r\n  /** The content of the non-toggle Button.  */\r\n  title: PropTypes.node.isRequired,\r\n\r\n  /** A `type` passed to the non-toggle Button */\r\n  type: PropTypes.string,\r\n\r\n  /** Disables both Buttons  */\r\n  disabled: PropTypes.bool,\r\n\r\n  /**\r\n   * Aligns the dropdown menu.\r\n   *\r\n   * _see [DropdownMenu](#dropdown-menu-props) for more details_\r\n   *\r\n   * @type {\"start\"|\"end\"|{ sm: \"start\"|\"end\" }|{ md: \"start\"|\"end\" }|{ lg: \"start\"|\"end\" }|{ xl: \"start\"|\"end\"}|{ xxl: \"start\"|\"end\"} }\r\n   */\r\n  align: alignPropType,\r\n\r\n  /** An ARIA accessible role applied to the Menu component. When set to 'menu', The dropdown */\r\n  menuRole: PropTypes.string,\r\n\r\n  /** Whether to render the dropdown menu in the DOM before the first time it is shown */\r\n  renderMenuOnMount: PropTypes.bool,\r\n\r\n  /**\r\n   *  Which event when fired outside the component will cause it to be closed.\r\n   *\r\n   * _see [DropdownMenu](#dropdown-menu-props) for more details_\r\n   */\r\n  rootCloseEvent: PropTypes.string,\r\n\r\n  /** @ignore */\r\n  bsPrefix: PropTypes.string,\r\n\r\n  /** @ignore */\r\n  variant: PropTypes.string,\r\n\r\n  /** @ignore */\r\n  size: PropTypes.string\r\n};\r\nconst defaultProps = {\r\n  toggleLabel: 'Toggle dropdown',\r\n  type: 'button'\r\n};\r\n/**\r\n * A convenience component for simple or general use split button dropdowns. Renders a\r\n * `ButtonGroup` containing a `Button` and a `Button` toggle for the `Dropdown`. All `children`\r\n * are passed directly to the default `Dropdown.Menu`. This component accepts all of [`Dropdown`'s\r\n * props](#dropdown-props).\r\n *\r\n * _All unknown props are passed through to the `Dropdown` component._\r\n * The Button `variant`, `size` and `bsPrefix` props are passed to the button and toggle,\r\n * and menu-related props are passed to the `Dropdown.Menu`\r\n */\r\n\r\nconst SplitButton = /*#__PURE__*/React.forwardRef(({\r\n  id,\r\n  bsPrefix,\r\n  size,\r\n  variant,\r\n  title,\r\n  type,\r\n  toggleLabel,\r\n  children,\r\n  onClick,\r\n  href,\r\n  target,\r\n  menuRole,\r\n  renderMenuOnMount,\r\n  rootCloseEvent,\r\n  ...props\r\n}, ref) => /*#__PURE__*/_jsxs(Dropdown, {\r\n  ref: ref,\r\n  ...props,\r\n  as: ButtonGroup,\r\n  children: [/*#__PURE__*/_jsx(Button, {\r\n    size: size,\r\n    variant: variant,\r\n    disabled: props.disabled,\r\n    bsPrefix: bsPrefix,\r\n    href: href,\r\n    target: target,\r\n    onClick: onClick,\r\n    type: type,\r\n    children: title\r\n  }), /*#__PURE__*/_jsx(Dropdown.Toggle, {\r\n    split: true,\r\n    id: id,\r\n    size: size,\r\n    variant: variant,\r\n    disabled: props.disabled,\r\n    childBsPrefix: bsPrefix,\r\n    children: /*#__PURE__*/_jsx(\"span\", {\r\n      className: \"visually-hidden\",\r\n      children: toggleLabel\r\n    })\r\n  }), /*#__PURE__*/_jsx(Dropdown.Menu, {\r\n    role: menuRole,\r\n    renderOnMount: renderMenuOnMount,\r\n    rootCloseEvent: rootCloseEvent,\r\n    children: children\r\n  })]\r\n}));\r\nSplitButton.propTypes = propTypes;\r\nSplitButton.defaultProps = defaultProps;\r\nSplitButton.displayName = 'SplitButton';\r\nexport default SplitButton;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}