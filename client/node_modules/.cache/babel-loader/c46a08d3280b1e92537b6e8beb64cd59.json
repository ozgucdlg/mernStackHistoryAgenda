{"ast":null,"code":"import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport Dropdown from './Dropdown';\nimport DropdownToggle from './DropdownToggle';\nimport DropdownMenu from './DropdownMenu';\nimport { alignPropType } from './types';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst propTypes = {\n  /**\r\n   * An html id attribute for the Toggle button, necessary for assistive technologies, such as screen readers.\r\n   * @type {string}\r\n   */\n  id: PropTypes.string,\n  /** An `href` passed to the Toggle component */\n  href: PropTypes.string,\n  /** An `onClick` handler passed to the Toggle component */\n  onClick: PropTypes.func,\n  /** The content of the non-toggle Button.  */\n  title: PropTypes.node.isRequired,\n  /** Disables both Buttons  */\n  disabled: PropTypes.bool,\n  /**\r\n   * Aligns the dropdown menu.\r\n   *\r\n   * _see [DropdownMenu](#dropdown-menu-props) for more details_\r\n   *\r\n   * @type {\"start\"|\"end\"|{ sm: \"start\"|\"end\" }|{ md: \"start\"|\"end\" }|{ lg: \"start\"|\"end\" }|{ xl: \"start\"|\"end\"}|{ xxl: \"start\"|\"end\"} }\r\n   */\n  align: alignPropType,\n  /** An ARIA accessible role applied to the Menu component. When set to 'menu', The dropdown */\n  menuRole: PropTypes.string,\n  /** Whether to render the dropdown menu in the DOM before the first time it is shown */\n  renderMenuOnMount: PropTypes.bool,\n  /**\r\n   *  Which event when fired outside the component will cause it to be closed.\r\n   *\r\n   * _see [DropdownMenu](#dropdown-menu-props) for more details_\r\n   */\n  rootCloseEvent: PropTypes.string,\n  /**\r\n   * Menu color variant.\r\n   *\r\n   * Omitting this will use the default light color.\r\n   */\n  menuVariant: PropTypes.oneOf(['dark']),\n  /** @ignore */\n  bsPrefix: PropTypes.string,\n  /** @ignore */\n  variant: PropTypes.string,\n  /** @ignore */\n  size: PropTypes.string\n};\n/**\r\n * A convenience component for simple or general use dropdowns. Renders a `Button` toggle and all `children`\r\n * are passed directly to the default `Dropdown.Menu`. This component accepts all of\r\n * [`Dropdown`'s props](#dropdown-props).\r\n *\r\n * _All unknown props are passed through to the `Dropdown` component._ Only\r\n * the Button `variant`, `size` and `bsPrefix` props are passed to the toggle,\r\n * along with menu-related props are passed to the `Dropdown.Menu`\r\n */\n\nconst DropdownButton = /*#__PURE__*/React.forwardRef(({\n  title,\n  children,\n  bsPrefix,\n  rootCloseEvent,\n  variant,\n  size,\n  menuRole,\n  renderMenuOnMount,\n  disabled,\n  href,\n  id,\n  menuVariant,\n  ...props\n}, ref) => /*#__PURE__*/_jsxs(Dropdown, {\n  ref: ref,\n  ...props,\n  children: [/*#__PURE__*/_jsx(DropdownToggle, {\n    id: id,\n    href: href,\n    size: size,\n    variant: variant,\n    disabled: disabled,\n    childBsPrefix: bsPrefix,\n    children: title\n  }), /*#__PURE__*/_jsx(DropdownMenu, {\n    role: menuRole,\n    renderOnMount: renderMenuOnMount,\n    rootCloseEvent: rootCloseEvent,\n    variant: menuVariant,\n    children: children\n  })]\n}));\nDropdownButton.displayName = 'DropdownButton';\nDropdownButton.propTypes = propTypes;\nexport default DropdownButton;","map":{"version":3,"names":["React","PropTypes","Dropdown","DropdownToggle","DropdownMenu","alignPropType","jsx","_jsx","jsxs","_jsxs","propTypes","id","string","href","onClick","func","title","node","isRequired","disabled","bool","align","menuRole","renderMenuOnMount","rootCloseEvent","menuVariant","oneOf","bsPrefix","variant","size","DropdownButton","forwardRef","children","props","ref","childBsPrefix","role","renderOnMount","displayName"],"sources":["C:/Users/ozguc/react-workspace/mernStack/mernStackHistoryAgenda/client/node_modules/react-bootstrap/esm/DropdownButton.js"],"sourcesContent":["import * as React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Dropdown from './Dropdown';\r\nimport DropdownToggle from './DropdownToggle';\r\nimport DropdownMenu from './DropdownMenu';\r\nimport { alignPropType } from './types';\r\nimport { jsx as _jsx } from \"react/jsx-runtime\";\r\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\r\nconst propTypes = {\r\n  /**\r\n   * An html id attribute for the Toggle button, necessary for assistive technologies, such as screen readers.\r\n   * @type {string}\r\n   */\r\n  id: PropTypes.string,\r\n\r\n  /** An `href` passed to the Toggle component */\r\n  href: PropTypes.string,\r\n\r\n  /** An `onClick` handler passed to the Toggle component */\r\n  onClick: PropTypes.func,\r\n\r\n  /** The content of the non-toggle Button.  */\r\n  title: PropTypes.node.isRequired,\r\n\r\n  /** Disables both Buttons  */\r\n  disabled: PropTypes.bool,\r\n\r\n  /**\r\n   * Aligns the dropdown menu.\r\n   *\r\n   * _see [DropdownMenu](#dropdown-menu-props) for more details_\r\n   *\r\n   * @type {\"start\"|\"end\"|{ sm: \"start\"|\"end\" }|{ md: \"start\"|\"end\" }|{ lg: \"start\"|\"end\" }|{ xl: \"start\"|\"end\"}|{ xxl: \"start\"|\"end\"} }\r\n   */\r\n  align: alignPropType,\r\n\r\n  /** An ARIA accessible role applied to the Menu component. When set to 'menu', The dropdown */\r\n  menuRole: PropTypes.string,\r\n\r\n  /** Whether to render the dropdown menu in the DOM before the first time it is shown */\r\n  renderMenuOnMount: PropTypes.bool,\r\n\r\n  /**\r\n   *  Which event when fired outside the component will cause it to be closed.\r\n   *\r\n   * _see [DropdownMenu](#dropdown-menu-props) for more details_\r\n   */\r\n  rootCloseEvent: PropTypes.string,\r\n\r\n  /**\r\n   * Menu color variant.\r\n   *\r\n   * Omitting this will use the default light color.\r\n   */\r\n  menuVariant: PropTypes.oneOf(['dark']),\r\n\r\n  /** @ignore */\r\n  bsPrefix: PropTypes.string,\r\n\r\n  /** @ignore */\r\n  variant: PropTypes.string,\r\n\r\n  /** @ignore */\r\n  size: PropTypes.string\r\n};\r\n/**\r\n * A convenience component for simple or general use dropdowns. Renders a `Button` toggle and all `children`\r\n * are passed directly to the default `Dropdown.Menu`. This component accepts all of\r\n * [`Dropdown`'s props](#dropdown-props).\r\n *\r\n * _All unknown props are passed through to the `Dropdown` component._ Only\r\n * the Button `variant`, `size` and `bsPrefix` props are passed to the toggle,\r\n * along with menu-related props are passed to the `Dropdown.Menu`\r\n */\r\n\r\nconst DropdownButton = /*#__PURE__*/React.forwardRef(({\r\n  title,\r\n  children,\r\n  bsPrefix,\r\n  rootCloseEvent,\r\n  variant,\r\n  size,\r\n  menuRole,\r\n  renderMenuOnMount,\r\n  disabled,\r\n  href,\r\n  id,\r\n  menuVariant,\r\n  ...props\r\n}, ref) => /*#__PURE__*/_jsxs(Dropdown, {\r\n  ref: ref,\r\n  ...props,\r\n  children: [/*#__PURE__*/_jsx(DropdownToggle, {\r\n    id: id,\r\n    href: href,\r\n    size: size,\r\n    variant: variant,\r\n    disabled: disabled,\r\n    childBsPrefix: bsPrefix,\r\n    children: title\r\n  }), /*#__PURE__*/_jsx(DropdownMenu, {\r\n    role: menuRole,\r\n    renderOnMount: renderMenuOnMount,\r\n    rootCloseEvent: rootCloseEvent,\r\n    variant: menuVariant,\r\n    children: children\r\n  })]\r\n}));\r\nDropdownButton.displayName = 'DropdownButton';\r\nDropdownButton.propTypes = propTypes;\r\nexport default DropdownButton;"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAOC,QAAQ,MAAM,YAAY;AACjC,OAAOC,cAAc,MAAM,kBAAkB;AAC7C,OAAOC,YAAY,MAAM,gBAAgB;AACzC,SAASC,aAAa,QAAQ,SAAS;AACvC,SAASC,GAAG,IAAIC,IAAI,QAAQ,mBAAmB;AAC/C,SAASC,IAAI,IAAIC,KAAK,QAAQ,mBAAmB;AACjD,MAAMC,SAAS,GAAG;EAChB;AACF;AACA;AACA;EACEC,EAAE,EAAEV,SAAS,CAACW,MAAM;EAEpB;EACAC,IAAI,EAAEZ,SAAS,CAACW,MAAM;EAEtB;EACAE,OAAO,EAAEb,SAAS,CAACc,IAAI;EAEvB;EACAC,KAAK,EAAEf,SAAS,CAACgB,IAAI,CAACC,UAAU;EAEhC;EACAC,QAAQ,EAAElB,SAAS,CAACmB,IAAI;EAExB;AACF;AACA;AACA;AACA;AACA;AACA;EACEC,KAAK,EAAEhB,aAAa;EAEpB;EACAiB,QAAQ,EAAErB,SAAS,CAACW,MAAM;EAE1B;EACAW,iBAAiB,EAAEtB,SAAS,CAACmB,IAAI;EAEjC;AACF;AACA;AACA;AACA;EACEI,cAAc,EAAEvB,SAAS,CAACW,MAAM;EAEhC;AACF;AACA;AACA;AACA;EACEa,WAAW,EAAExB,SAAS,CAACyB,KAAK,CAAC,CAAC,MAAM,CAAC,CAAC;EAEtC;EACAC,QAAQ,EAAE1B,SAAS,CAACW,MAAM;EAE1B;EACAgB,OAAO,EAAE3B,SAAS,CAACW,MAAM;EAEzB;EACAiB,IAAI,EAAE5B,SAAS,CAACW;AAClB,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMkB,cAAc,GAAG,aAAa9B,KAAK,CAAC+B,UAAU,CAAC,CAAC;EACpDf,KAAK;EACLgB,QAAQ;EACRL,QAAQ;EACRH,cAAc;EACdI,OAAO;EACPC,IAAI;EACJP,QAAQ;EACRC,iBAAiB;EACjBJ,QAAQ;EACRN,IAAI;EACJF,EAAE;EACFc,WAAW;EACX,GAAGQ;AACL,CAAC,EAAEC,GAAG,KAAK,aAAazB,KAAK,CAACP,QAAQ,EAAE;EACtCgC,GAAG,EAAEA,GAAG;EACR,GAAGD,KAAK;EACRD,QAAQ,EAAE,CAAC,aAAazB,IAAI,CAACJ,cAAc,EAAE;IAC3CQ,EAAE,EAAEA,EAAE;IACNE,IAAI,EAAEA,IAAI;IACVgB,IAAI,EAAEA,IAAI;IACVD,OAAO,EAAEA,OAAO;IAChBT,QAAQ,EAAEA,QAAQ;IAClBgB,aAAa,EAAER,QAAQ;IACvBK,QAAQ,EAAEhB;EACZ,CAAC,CAAC,EAAE,aAAaT,IAAI,CAACH,YAAY,EAAE;IAClCgC,IAAI,EAAEd,QAAQ;IACde,aAAa,EAAEd,iBAAiB;IAChCC,cAAc,EAAEA,cAAc;IAC9BI,OAAO,EAAEH,WAAW;IACpBO,QAAQ,EAAEA;EACZ,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC;AACHF,cAAc,CAACQ,WAAW,GAAG,gBAAgB;AAC7CR,cAAc,CAACpB,SAAS,GAAGA,SAAS;AACpC,eAAeoB,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module"}