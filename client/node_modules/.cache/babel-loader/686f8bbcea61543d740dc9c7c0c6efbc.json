{"ast":null,"code":"// import { isHTMLElement } from './instanceOf';\nexport default function getBoundingClientRect(element,\n// eslint-disable-next-line unused-imports/no-unused-vars\nincludeScale) {\n  if (includeScale === void 0) {\n    includeScale = false;\n  }\n  var rect = element.getBoundingClientRect();\n  var scaleX = 1;\n  var scaleY = 1; // FIXME:\n  // `offsetWidth` returns an integer while `getBoundingClientRect`\n  // returns a float. This results in `scaleX` or `scaleY` being\n  // non-1 when it should be for elements that aren't a full pixel in\n  // width or height.\n  // if (isHTMLElement(element) && includeScale) {\n  //   const offsetHeight = element.offsetHeight;\n  //   const offsetWidth = element.offsetWidth;\n  //   // Do not attempt to divide by 0, otherwise we get `Infinity` as scale\n  //   // Fallback to 1 in case both values are `0`\n  //   if (offsetWidth > 0) {\n  //     scaleX = rect.width / offsetWidth || 1;\n  //   }\n  //   if (offsetHeight > 0) {\n  //     scaleY = rect.height / offsetHeight || 1;\n  //   }\n  // }\n\n  return {\n    width: rect.width / scaleX,\n    height: rect.height / scaleY,\n    top: rect.top / scaleY,\n    right: rect.right / scaleX,\n    bottom: rect.bottom / scaleY,\n    left: rect.left / scaleX,\n    x: rect.left / scaleX,\n    y: rect.top / scaleY\n  };\n}","map":{"version":3,"names":["getBoundingClientRect","element","includeScale","rect","scaleX","scaleY","width","height","top","right","bottom","left","x","y"],"sources":["C:/Users/ozguc/react-workspace/mernStack/mernStackHistoryAgenda/client/node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js"],"sourcesContent":["// import { isHTMLElement } from './instanceOf';\r\nexport default function getBoundingClientRect(element, // eslint-disable-next-line unused-imports/no-unused-vars\r\nincludeScale) {\r\n  if (includeScale === void 0) {\r\n    includeScale = false;\r\n  }\r\n\r\n  var rect = element.getBoundingClientRect();\r\n  var scaleX = 1;\r\n  var scaleY = 1; // FIXME:\r\n  // `offsetWidth` returns an integer while `getBoundingClientRect`\r\n  // returns a float. This results in `scaleX` or `scaleY` being\r\n  // non-1 when it should be for elements that aren't a full pixel in\r\n  // width or height.\r\n  // if (isHTMLElement(element) && includeScale) {\r\n  //   const offsetHeight = element.offsetHeight;\r\n  //   const offsetWidth = element.offsetWidth;\r\n  //   // Do not attempt to divide by 0, otherwise we get `Infinity` as scale\r\n  //   // Fallback to 1 in case both values are `0`\r\n  //   if (offsetWidth > 0) {\r\n  //     scaleX = rect.width / offsetWidth || 1;\r\n  //   }\r\n  //   if (offsetHeight > 0) {\r\n  //     scaleY = rect.height / offsetHeight || 1;\r\n  //   }\r\n  // }\r\n\r\n  return {\r\n    width: rect.width / scaleX,\r\n    height: rect.height / scaleY,\r\n    top: rect.top / scaleY,\r\n    right: rect.right / scaleX,\r\n    bottom: rect.bottom / scaleY,\r\n    left: rect.left / scaleX,\r\n    x: rect.left / scaleX,\r\n    y: rect.top / scaleY\r\n  };\r\n}"],"mappings":"AAAA;AACA,eAAe,SAASA,qBAAqBA,CAACC,OAAO;AAAE;AACvDC,YAAY,EAAE;EACZ,IAAIA,YAAY,KAAK,KAAK,CAAC,EAAE;IAC3BA,YAAY,GAAG,KAAK;EACtB;EAEA,IAAIC,IAAI,GAAGF,OAAO,CAACD,qBAAqB,CAAC,CAAC;EAC1C,IAAII,MAAM,GAAG,CAAC;EACd,IAAIC,MAAM,GAAG,CAAC,CAAC,CAAC;EAChB;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,OAAO;IACLC,KAAK,EAAEH,IAAI,CAACG,KAAK,GAAGF,MAAM;IAC1BG,MAAM,EAAEJ,IAAI,CAACI,MAAM,GAAGF,MAAM;IAC5BG,GAAG,EAAEL,IAAI,CAACK,GAAG,GAAGH,MAAM;IACtBI,KAAK,EAAEN,IAAI,CAACM,KAAK,GAAGL,MAAM;IAC1BM,MAAM,EAAEP,IAAI,CAACO,MAAM,GAAGL,MAAM;IAC5BM,IAAI,EAAER,IAAI,CAACQ,IAAI,GAAGP,MAAM;IACxBQ,CAAC,EAAET,IAAI,CAACQ,IAAI,GAAGP,MAAM;IACrBS,CAAC,EAAEV,IAAI,CAACK,GAAG,GAAGH;EAChB,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module"}